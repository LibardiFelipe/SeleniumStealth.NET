//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SeleniumStealth.NET.Resources {
    using System;
    
    
    /// <summary>
    ///   Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.
    /// </summary>
    // Essa classe foi gerada automaticamente pela classe StronglyTypedResourceBuilder
    // através de uma ferramenta como ResGen ou Visual Studio.
    // Para adicionar ou remover um associado, edite o arquivo .ResX e execute ResGen novamente
    // com a opção /str, ou recrie o projeto do VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class JsFunctions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal JsFunctions() {
        }
        
        /// <summary>
        ///   Retorna a instância de ResourceManager armazenada em cache usada por essa classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SeleniumStealth.NET.Resources.JsFunctions", typeof(JsFunctions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Substitui a propriedade CurrentUICulture do thread atual para todas as
        ///   pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Fake loading times injected!&apos;)
        ///    try {
        ///        if (!window.chrome) {
        ///            Object.defineProperty(window, &apos;chrome&apos;, {
        ///                writable: true,
        ///                enumerable: true,
        ///                configurable: false,
        ///                value: {}
        ///            })
        ///        }
        ///
        ///        if (&apos;csi&apos; in window.chrome) {
        ///            return
        ///        }
        ///
        ///        if (!window.performance || !window.performance.timing) {
        ///            return
        ///        }
        ///
        ///        const { timing } [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string FakeLoadingTimes {
            get {
                return ResourceManager.GetString("FakeLoadingTimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///  moveMouseCursorToElement = (element, ms) =&gt; {
        ///    function getElementCoords(element) {
        ///      const { top, left, width, height } = element.getBoundingClientRect();
        ///      const x = left + width / 2;
        ///      const y = top + height / 2;
        ///      return { x, y };
        ///    }
        ///
        ///    function triggerMouseMove(coords) {
        ///      const event = new MouseEvent(&quot;mousemove&quot;, {
        ///        view: window,
        ///        bubbles: true,
        ///        cancelable: true,
        ///        clientX: coords.x,
        ///        clientY: coords.y,
        ///      });        /// [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string FakeMouseMovement {
            get {
                return ResourceManager.GetString("FakeMouseMovement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///	console.log(&apos;Fix hairline injected!&apos;)
        ///    try {
        ///		const elementDescriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, &apos;offsetHeight&apos;)
        ///
        ///		Object.defineProperty(HTMLDivElement.prototype, &apos;offsetHeight&apos;, {
        ///			...elementDescriptor,
        ///			get: function () {
        ///				if (this.id === &apos;modernizr&apos;) {
        ///					return 1;
        ///				}
        ///				return elementDescriptor.get.apply(this)
        ///			},
        ///		});
        ///    } catch (e) {
        ///		console.error(&apos;Fix hairline: &apos; + e)
        ///    }
        ///}.
        /// </summary>
        internal static string FixHairline {
            get {
                return ResourceManager.GetString("FixHairline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a (vendor) =&gt; {
        ///  Object.defineProperty(Object.getPrototypeOf(navigator), &apos;vendor&apos;, {
        ///    get: () =&gt; vendor || &apos;Google Inc.&apos;
        ///  })
        ///}.
        /// </summary>
        internal static string NavigatorVendor {
            get {
                return ResourceManager.GetString("NavigatorVendor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Remove CDC variables injected!&apos;)
        ///
        ///    try {
        ///        const regex = /..._[a-zA-Z0-9]{22}_(Array|Promise|Symbol)/;
        ///
        ///        for (let prop in window) {
        ///            if (regex.test(prop)) {
        ///                delete window[prop];
        ///            }
        ///        }
        ///    } catch (e) {
        ///        console.error(&apos;Remove CDC variables:&apos;+ e)
        ///    }
        ///}.
        /// </summary>
        internal static string RemoveCdcVariables {
            get {
                return ResourceManager.GetString("RemoveCdcVariables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Fake CanPlayType injected!&apos;)
        ///    try {
        ///        const parseInput = arg =&gt; {
        ///            const [mime, codecStr] = arg.trim().split(&apos;;&apos;)
        ///            let codecs = []
        ///            if (codecStr &amp;&amp; codecStr.includes(&apos;codecs=&apos;)) {
        ///                codecs = codecStr
        ///                    .trim()
        ///                    .replace(`codecs=&apos;`, &apos;&apos;)
        ///                    .replace(`&apos;`, &apos;&apos;)
        ///                    .trim()
        ///                    .split(&apos;,&apos;)
        ///                    .filter(x =&gt; !!x)
        ///         [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_FakeCanPlayType {
            get {
                return ResourceManager.GetString("SeleniumStealth_FakeCanPlayType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Fake chrome app injected!&apos;)
        ///    try {
        ///        if (!window.chrome) {
        ///
        ///            Object.defineProperty(window, &apos;chrome&apos;, {
        ///                writable: true,
        ///                enumerable: true,
        ///                configurable: false,
        ///                value: {}
        ///            })
        ///        }
        ///
        ///        if (&apos;app&apos; in window.chrome) {
        ///            return
        ///        }
        ///
        ///        const makeError = {
        ///            ErrorInInvocation: fn =&gt; {
        ///                const err = new TypeError(`Error in inv [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_FakeChromeApp {
            get {
                return ResourceManager.GetString("SeleniumStealth_FakeChromeApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a (runOnInsecureOrigins) =&gt; {
        ///    console.log(&apos;Fake chrome runtime injected!&apos;)
        ///    try {
        ///        Object.defineProperty(navigator, &apos;maxTouchPoints&apos;, { get: () =&gt; 1 })
        ///        Object.defineProperty(navigator.connection, &apos;rtt&apos;, { get: () =&gt; 100 })
        ///
        ///        const STATIC_DATA = {
        ///            &apos;OnInstalledReason&apos;: {
        ///                &apos;CHROME_UPDATE&apos;: &apos;chrome_update&apos;,
        ///                &apos;INSTALL&apos;: &apos;install&apos;,
        ///                &apos;SHARED_MODULE_UPDATE&apos;: &apos;shared_module_update&apos;,
        ///                &apos;UPDATE&apos;: &apos;update&apos;
        ///     [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_FakeChromeRuntime {
            get {
                return ResourceManager.GetString("SeleniumStealth_FakeChromeRuntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Fake plugins and mimes injected!&apos;)
        ///    try {
        ///        const fns = {};
        ///        fns.generatePluginArray = (utils, fns) =&gt; pluginsData =&gt; {
        ///            return fns.generateMagicArray(utils, fns)(
        ///                pluginsData,
        ///                PluginArray.prototype,
        ///                Plugin.prototype,
        ///                &apos;name&apos;
        ///            )
        ///        }
        ///        fns.generateFunctionMocks = utils =&gt; (
        ///            proto,
        ///            itemMainProp,
        ///            dataArray
        ///        ) =&gt; ({
        /// [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_FakePluginsAndMimes {
            get {
                return ResourceManager.GetString("SeleniumStealth_FakePluginsAndMimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Fake window outer dimensions injected!&apos;)
        ///    try {
        ///        if (window.outerWidth &amp;&amp; window.outerHeight) {
        ///            return
        ///        }
        ///        const windowFrame = 85
        ///        window.outerWidth = window.innerWidth
        ///        window.outerHeight = window.innerHeight + windowFrame
        ///    } catch (e) {
        ///        console.error(&apos;Fake window outer dimensions: &apos; + e)
        ///    }
        ///}.
        /// </summary>
        internal static string SeleniumStealth_FakeWindowOuterDimensions {
            get {
                return ResourceManager.GetString("SeleniumStealth_FakeWindowOuterDimensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Hide webdriver injected!&apos;)
        ///
        ///    try {
        ///        Object.defineProperty(window, &apos;navigator&apos;, {
        ///            value: new Proxy(navigator, {
        ///                has: (target, key) =&gt; (key === &apos;webdriver&apos; ? false : key in target),
        ///                get: (target, key) =&gt;
        ///                    key === &apos;webdriver&apos;
        ///                        ? false
        ///                        : typeof target[key] === &apos;function&apos;
        ///                            ? target[key].bind(target)
        ///                            : ta [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_HideWebDriver {
            get {
                return ResourceManager.GetString("SeleniumStealth_HideWebDriver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;iFrame proxy injected!&apos;)
        ///    try {
        ///        const addContentWindowProxy = iframe =&gt; {
        ///            const contentWindowProxy = {
        ///                get(target, key) {
        ///
        ///                    if (key === &apos;self&apos;) {
        ///                        return this
        ///                    }
        ///
        ///                    if (key === &apos;frameElement&apos;) {
        ///                        return iframe
        ///                    }
        ///                    return Reflect.get(target, key)
        ///                }
        ///            }
        ///
        ///            [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_iFrameProxy {
            get {
                return ResourceManager.GetString("SeleniumStealth_iFrameProxy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Query proxy injected!&apos;)
        ///    try {
        ///        const handler = {
        ///            apply: function (target, ctx, args) {
        ///                const param = (args || [])[0]
        ///
        ///                if (param &amp;&amp; param.name &amp;&amp; param.name === &apos;notifications&apos;) {
        ///                    const result = { state: Notification.permission }
        ///                    Object.setPrototypeOf(result, PermissionStatus.prototype)
        ///                    return Promise.resolve(result)
        ///                }
        ///
        ///                return [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_QueryProxy {
            get {
                return ResourceManager.GetString("SeleniumStealth_QueryProxy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;Required utility pack injected!&apos;)
        ///    utils = {}
        ///
        ///    utils.stripProxyFromErrors = (handler = {}) =&gt; {
        ///        const newHandler = {}
        ///
        ///        const traps = Object.getOwnPropertyNames(handler)
        ///        traps.forEach(trap =&gt; {
        ///            newHandler[trap] = function () {
        ///                try {
        ///
        ///                    return handler[trap].apply(this, arguments || [])
        ///                } catch (err) {
        ///
        ///                    if (!err || !err.stack || !err.stack.includes(`at `)) {
        /// [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SeleniumStealth_RequiredUtilityPack {
            get {
                return ResourceManager.GetString("SeleniumStealth_RequiredUtilityPack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a (memory) =&gt; {
        ///  Object.defineProperty(navigator, &apos;deviceMemory&apos;, {
        ///    get: () =&gt; memory
        ///  });
        ///}.
        /// </summary>
        internal static string SetDeviceMemory {
            get {
                return ResourceManager.GetString("SetDeviceMemory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a () =&gt; {
        ///    console.log(&apos;UndetectedChromedriver injected!&apos;)
        ///
        ///    try {
        ///        Object.defineProperty(window, &apos;navigator&apos;, {
        ///            value: new Proxy(navigator, {
        ///                has: (target, key) =&gt; (key === &apos;webdriver&apos; ? false : key in target),
        ///                get: (target, key) =&gt;
        ///                    key === &apos;webdriver&apos;
        ///                        ? false
        ///                        : typeof target[key] === &apos;function&apos;
        ///                            ? target[key].bind(target)
        ///                         [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string UndetectedChromeDriver {
            get {
                return ResourceManager.GetString("UndetectedChromeDriver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a (webglvendor, webglrenderer) =&gt; {
        ///  const getParameterProxyHandler = {
        ///    apply: function (target, ctx, args) {
        ///        const param = (args || [])[0]
        ///
        ///        if (param === 37445) {
        ///            return webglvendor
        ///        }
        ///
        ///        if (param === 37446) {
        ///            return webglrenderer
        ///        }
        ///        return utils.cache.Reflect.apply(target, ctx, args)
        ///    }
        ///  }
        ///
        ///  const addProxy = (obj, propName) =&gt; {
        ///      utils.replaceWithProxy(obj, propName, getParameterProxyHandler)
        ///  }
        ///
        ///  addPr [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string WebGlVendor {
            get {
                return ResourceManager.GetString("WebGlVendor", resourceCulture);
            }
        }
    }
}
